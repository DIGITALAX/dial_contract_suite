type AccessControlUpdated @entity(immutable: true) {
  id: Bytes!
  oldAccessControl: Bytes! # address
  newAccessControl: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchTokenMinted @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  tokenIds: [BigInt!]! # uint256[]
  uri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinCollectionUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinCollection: Bytes! # address
  newChromadinCollection: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinEscrowUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinEscrow: Bytes! # address
  newChromadinEscrow: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenAcceptedTokensUpdated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  oldAcceptedTokens: [Bytes!]! # address[]
  newAcceptedTokens: [Bytes!]! # address[]
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenBasePriceUpdated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  oldPrice: [BigInt!]! # uint256[]
  newPrice: [BigInt!]! # uint256[]
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenBurned @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenFulfillmentUpdated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenURIUpdated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  oldURI: String! # string
  newURI: String! # string
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ChromadinCollectionAccessControlUpdated @entity(immutable: true) {
  id: Bytes!
  oldAccessControl: Bytes! # address
  newAccessControl: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinDropUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinDrop: Bytes! # address
  newChromadinDrop: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinCollectionChromadinEscrowUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinEscrow: Bytes! # address
  newChromadinEscrow: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinNFTUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinNFT: Bytes! # address
  newChromadinNFT: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinPaymentUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinPayment: Bytes! # address
  newChromadinPayment: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionAcceptedTokensUpdated @entity(immutable: true) {
  id: Bytes!
  collectionId: BigInt! # uint256
  oldAcceptedTokens: [Bytes!]! # address[]
  newAcceptedTokens: [Bytes!]! # address[]
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionBasePricesUpdated @entity(immutable: true) {
  id: Bytes!
  collectionId: BigInt! # uint256
  oldPrices: [BigInt!]! # uint256[]
  newPrices: [BigInt!]! # uint256[]
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionBurned @entity(immutable: true) {
  id: Bytes!
  burner: Bytes! # address
  collectionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionFulfillmentUpdated @entity(immutable: true) {
  id: Bytes!
  collectionId: BigInt! # uint256
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionMinted @entity(immutable: false) {
  id: Bytes!
  collectionId: BigInt! # uint256
  name: String! # string
  uri: String! # string
  amount: BigInt! # uint256
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  acceptedTokens: [Bytes!]!
  basePrices: [BigInt!]!
  tokenIds: [BigInt!]!
  soldTokens: [BigInt!]
}

type CollectionNameUpdated @entity(immutable: true) {
  id: Bytes!
  collectionId: BigInt! # uint256
  oldName: String! # string
  newName: String! # string
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionURIUpdated @entity(immutable: false) {
  id: Bytes!
  collectionId: BigInt! # uint256
  oldURI: String! # string
  newURI: String! # string
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ChromadinMarketplaceAccessControlUpdated @entity(immutable: true) {
  id: Bytes!
  oldAccessControl: Bytes! # address
  newAccessControl: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinMarketplaceChromadinCollectionUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinCollection: Bytes! # address
  newChromadinCollection: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinMarketplaceChromadinEscrowUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinEscrow: Bytes! # address
  newChromadinEscrow: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinMarketplaceChromadinNFTUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinNFT: Bytes! # address
  newChromadinNFT: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensBought @entity(immutable: false) {
  id: Bytes!
  tokenIds: [BigInt!]! # uint256[]
  totalPrice: BigInt! # uint256
  buyer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  uri: String!
  name: String!
  creator: Bytes!
  chosenAddress: Bytes!
}
type ChromadinEscrowAccessControlUpdated @entity(immutable: true) {
  id: Bytes!
  oldAccessControl: Bytes! # address
  newAccessControl: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinEscrowChromadinCollectionUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinCollection: Bytes! # address
  newChromadinCollection: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinMarketplaceUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinMarketplace: Bytes! # address
  newChromadinMarketplace: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinEscrowChromadinNFTUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinNFT: Bytes! # address
  newChromadinNFT: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ChromadinDropAccessControlUpdated @entity(immutable: true) {
  id: Bytes!
  oldAccessControl: Bytes! # address
  newAccessControl: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChromadinDropChromadinCollectionUpdated @entity(immutable: true) {
  id: Bytes!
  oldChromadinCollection: Bytes! # address
  newChromadinCollection: Bytes! # address
  updater: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionAddedToDrop @entity(immutable: false) {
  id: Bytes!
  dropId: BigInt! # uint256
  collectionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionRemovedFromDrop @entity(immutable: false) {
  id: Bytes!
  dropId: BigInt! # uint256
  collectionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DropCreated @entity(immutable: false) {
  id: Bytes!
  dropId: BigInt! # uint256
  collectionIds: [BigInt!]! # uint256[]
  creator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  dropURI: String!
}

type DropDeleted @entity(immutable: true) {
  id: Bytes!
  dropId: BigInt! # uint256
  deleter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DropURIUpdated @entity(immutable: true) {
  id: Bytes!
  dropId: BigInt! # uint256
  dropURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
